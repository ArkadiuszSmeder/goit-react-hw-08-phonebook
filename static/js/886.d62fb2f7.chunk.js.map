{"version":3,"file":"static/js/886.d62fb2f7.chunk.js","mappings":"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","sources":["styled/styled-contactForm.js","redux/contacts/selectors.js","components/ContactForm.jsx","styled/styled-filter.js","components/Filter.jsx","styled/styled-contactsPage.js","styled/styled-contacts.js","components/ContactsList.jsx","pages/Contacts.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ContactData = styled.form`\ndisplay: flex;\nflex-direction: column;\nmin-width: 320px;\nborder: 2px solid black;\npadding: 10px;\n`\n\nexport const ContactInput = styled.input`\nmargin: 10px 0px 10px 0px;\n// max-width: 150px;\ntransition: border-color 0.5s;\n\n&:hover {\nborder: 2px solid deepskyblue;\n}\n\n&:focus {\nborder: 2px solid deepskyblue;\n}\n`\n\nexport const ContactSubmit = styled.button`\nmargin-top: 10px;\nmax-width: 100px;\nalign-self: center;\ntransition: background-color 0.5s;\n\n&:hover {\nbackground-color: lightgreen;\n}\n\n&:focus {\nbackground-color: lightgreen;\n}\n`\n\nexport const ContactLabel = styled.label`\nfont-weight: 500;\n`","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter.filterContent;\n\nexport const selectVisibleContacts = createSelector(\n    [selectContacts, selectFilter],\n    (contacts, filter) => {\n    return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      );\n    }\n)","import React from \"react\";\nimport { ContactData, ContactInput, ContactSubmit, ContactLabel } from \"../styled/styled-contactForm\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContact } from \"../redux/contacts/operations\";\nimport { nanoid } from '@reduxjs/toolkit';\nimport { selectContacts } from \"../redux/contacts/selectors\";\n\nexport const ContactForm = () => {\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n\n    const duplicate = contacts.find(contact => \n      contact.name === name || contact.number === number\n    );\n    if (duplicate) {\n      alert(`Contact ${name} or phone number ${number} already exists in your phonebook`);\n      return;\n    }\n\n    dispatch(addContact({name, number}));\n    form.reset();\n  }\n\n  return (\n    <ContactData onSubmit={handleSubmit}>\n      <ContactLabel htmlFor=\"name\">Name</ContactLabel>\n      <ContactInput\n        id={nameInputId}\n        name=\"name\"\n        type=\"text\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <ContactLabel htmlFor=\"number\">Number</ContactLabel>\n      <ContactInput\n        id={numberInputId}\n        name=\"number\"\n        type=\"tel\"\n        pattern=\"[0-9+-]*\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <ContactSubmit type=\"submit\">Add contact</ContactSubmit>\n    </ContactData>\n  );\n};","import styled from \"styled-components\";\n\nexport const FilterPart = styled.div`\ndisplay: flex;\nflex-direction: column;\nmargin-top: 20px;\nalign-items: center;\n`\n\nexport const FilterField = styled.input`\nmin-width: 220px;\nmargin-top: 5px;\ntransition: border-color 0.5s;\n\n&:hover {\nborder: 2px solid deepskyblue;\n}\n\n&:focus {\nborder: 2px solid deepskyblue;\n}\n`","import React from \"react\"\nimport { FilterPart, FilterField } from \"styled/styled-filter\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { filterContact } from \"../redux/contacts/filterSlice\";\n\nexport const Filter = () => {\n\n    const dispatch = useDispatch();\n    const filter = useSelector((state) => state.contacts.filter);\n\n    const handleChange = (e) => {\n        dispatch(filterContact(e.target.value));\n      };\n\n    return <FilterPart>\n    <label className=\"label\" htmlFor=\"filter\">Find contacts by name</label>\n    <FilterField id=\"filter\" value={filter} onChange={handleChange} type=\"text\"/>\n    </FilterPart>\n}\n","import styled from \"styled-components\";\n\nexport const ContactsContainer = styled.div`\n    min-height: calc(100vh - 50px);\n    display: flex;\n    align-items: center;\n    // justify-content: center;\n    flex-direction: column;\n`;","import styled from \"styled-components\";\n\nexport const StyledList = styled.ul`\npadding-left: 0px;\n`;\n\nexport const DeleteButton = styled.button`\nmargin-left: 10px;\ntransition: background-color 0.5s;\n\n&:hover {\nbackground-color: orangered;\n}\n\n&:focus {\nbackground-color: orangered;\n}\n`\n\nexport const ListElement = styled.li`\nmargin-top: 5px;\nmargin-bottom: 5px;\ndisplay: flex;\njustify-content: space-between;\nalign-items: center;\n`","import React from \"react\";\nimport { DeleteButton, ListElement, StyledList } from \"styled/styled-contacts\";\nimport { deleteContact } from \"../redux/contacts/operations\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectVisibleContacts } from \"../redux/contacts/selectors\";\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts)\n\n  if (!visibleContacts) {\n    return null;\n  }\n\n  console.log(visibleContacts)\n\n  const handleDelete = (id) => dispatch(deleteContact(id))\n\n  return (\n    <StyledList>\n      {visibleContacts.map((contact) => (\n        <ListElement key={contact.id}>\n          {contact.name}: {contact.number}\n          <DeleteButton onClick={() => handleDelete(contact.id)}>Delete</DeleteButton>\n        </ListElement>\n      ))}\n    </StyledList>\n  );\n};","import { Helmet } from 'react-helmet';\nimport { ContactForm } from \"components/ContactForm\";\nimport { Filter } from \"components/Filter\";\nimport { ContactsContainer } from \"../styled/styled-contactsPage\";\nimport { ContactsList } from \"components/ContactsList\";\n\nconst Contacts = () => {\n    return (\n        <ContactsContainer>\n          <Helmet>\n            <title>Your contacts</title>\n          </Helmet>\n        <h1>\n          Add or find contact\n        </h1>\n        <ContactForm/>\n        <Filter/>\n        <ContactsList/>\n      </ContactsContainer>\n    )\n}\n\nexport default Contacts;"],"names":["ContactData","styled","_templateObject","_taggedTemplateLiteral","ContactInput","_templateObject2","ContactSubmit","_templateObject3","ContactLabel","_templateObject4","selectContacts","state","contacts","items","selectVisibleContacts","createSelector","filter","filterContent","contact","name","toLowerCase","includes","ContactForm","dispatch","useDispatch","useSelector","nameInputId","nanoid","numberInputId","_jsxs","onSubmit","event","preventDefault","form","currentTarget","elements","value","number","find","alert","concat","addContact","reset","children","_jsx","htmlFor","id","type","pattern","title","required","FilterPart","FilterField","Filter","className","onChange","e","filterContact","target","ContactsContainer","StyledList","DeleteButton","ListElement","ContactsList","visibleContacts","console","log","map","onClick","deleteContact","Helmet"],"sourceRoot":""}